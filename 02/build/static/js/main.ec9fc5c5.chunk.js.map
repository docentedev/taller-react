{"version":3,"sources":["components/footer/imgs/logo.png","components/menu/Menu.jsx","containers/home/Home.jsx","containers/login/Login.jsx","containers/post-detail/PostDetail.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Menu","props","toggle","bind","state","isOpen","this","setState","className","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","React","Component","posts","id","parentId","Home","Container","Row","Col","Jumbotron","map","post","md","lg","Card","CardHeader","CardBody","CardFooter","to","Login","PostDetail","match","params","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec9fc5c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.80687d23.png\";","import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\nexport default class Menu extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div className={this.props.className}>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">Taller react</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/components/\">Components</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Options\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    Option 1\n                  </DropdownItem>\n                  <DropdownItem>\n                    Option 2\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem>\n                    Reset\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Jumbotron ,Container, Row, Col,\n    Card, CardHeader,\n    CardBody, CardFooter } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nimport Menu from '../../components/menu/Menu';\n\nconst posts = [\n    { id: 1, parentId: 2},\n    { id: 2, parentId: 134},\n    { id: 3, parentId: 56},\n    { id: 4, parentId: 345},\n    { id: 5, parentId: 26},\n];\n\nconst Home = () => {\n    return (\n        <div className=\"home\">\n            <Menu className=\"mb-4\" />\n            <Container>\n                <Row>\n                    <Col>\n                        <Jumbotron>\n                            <h1>Hola</h1>\n                        </Jumbotron>\n                    </Col>\n                </Row>\n                <Row>\n                    {posts.map((post) => {\n                        return (\n                            <Col md=\"4\" lg=\"3\">\n                                <Card className=\"mt-4\">\n                                    <CardHeader>Post {post.id}</CardHeader>\n                                    <CardBody>\n                                        Mi body\n                                    </CardBody>\n                                    <CardFooter className=\"text-right\">\n                                        <Link className=\"btn btn-info\" to={`/post/detail/${post.id}/${post.parentId}`}>\n                                            ver detalle\n                                        </Link>\n                                    </CardFooter>\n                                </Card>\n                                \n                            </Col>  \n                        );\n                    })}\n                </Row>\n            </Container>\n            \n\n            <Link to=\"/login\">Login</Link><br/>\n            \n        </div>\n    );\n};\n\nexport default Home;","import React from 'react';\n// ROUTER\nimport { Link } from 'react-router-dom';\n\nconst Login = () => {\n    return (\n        <div className=\"login\">\n            Login\n            <Link to=\"/\">Home</Link>\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\n// ROUTER\n//import { Link } from 'react-router-dom';\n\nconst PostDetail = (props) => {\n    const { id, parentId } = props.match.params;\n    return (\n        <div className=\"post-detail\">\n            {id} - {parentId}\n        </div>\n    );\n};\n\nexport default PostDetail;","import React from 'react';\n// ROUTER\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// UI\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\n// Views\nimport Home from './containers/home/Home';\nimport Login from './containers/login/Login';\nimport PostDetail from './containers/post-detail/PostDetail';\n\n// Components\nimport Footer from './components/footer/Footer';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/post/detail/:id/:parentId\" component={PostDetail} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}